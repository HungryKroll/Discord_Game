# ui\equipment_menu.py

import discord
from ui.base_menu import BaseMenu, BaseButton
from models.item import Item
from models.inventory import InventoryManager
from models.storage import StorageType
from ui.embeds.item_embed import ItemEmbed
from ui.selectors.quantity_selector import ItemQuantitySelect
import logging

class EquipmentMenu(BaseMenu):
    @classmethod
    async def create(cls, user):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è.
        """

        items = await InventoryManager.get_items(user.id, StorageType.EQUIPMENT)
        instance = cls(user)

        back_button = BaseButton(
            label="–ù–∞–∑–∞–¥ üîô",
            user=user,
            callback=cls.go_back
        )
        instance.add_item(back_button)

        return instance

        if not items:
            logging.info(f"–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –ø—É—Å—Ç–æ")
        else:
            logging.info(f"–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user} –∑–∞–≥—Ä—É–∂–µ–Ω–æ")

    @staticmethod
    async def handle_sell(self, interaction: discord.Interaction, item):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        """
        try:
            success = await InventoryManager.sell_item(
                user_id=interaction.user.id,
                item_id=item['id'],
                quantity=item['quantity'],
                storage=StorageType.EQUIPMENT
            )

            if success:
                await interaction.response.send_message(
                    f"‚úÖ {item['name']} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω –∏–∑ üîß —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ üîß —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è",
                    ephemeral=True
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∏–∑ üîß —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è",
                ephemeral=True
            )

    @staticmethod
    async def handle_move(self, interaction: discord.Interaction, item):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        """
        try:
            success = await InventoryManager.move_item(
                user_id=interaction.user.id,
                item_id=item['id'],
                quantity=item['quantity'],
                from_storage=StorageType.EQUIPMENT,
                to_storage=StorageType.INVENTORY
            )

            if success:
                await interaction.response.send_message(
                    f"‚úÖ {item['name']} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –∏–∑ üîß —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ üîß —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                    ephemeral=True
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∏–∑ üîß —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                ephemeral=True
            )

    @staticmethod
    async def go_back(interaction: discord.Interaction):
        from ui.camp_menu import CampMenu
        try:
            camp_menu = await CampMenu.create(interaction.user)
            await interaction.response.edit_message(view=camp_menu)
        except Exception as e:
            logging.error(f"EquipmentMenu.go_back: {e}")
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", ephemeral=True)

class EquipmentValidator:
    @staticmethod
    async def validate_equipment(user_id: int, new_item: Item) -> bool:
        equipped = await get_equipped_items(user_id)  # –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –∏–∑ –ë–î

        # –°—á–∏—Ç–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Ä—É–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
        total_hands = 0
        has_two_handed = False
        has_shield = False

        for item in equipped:
            if item.category == "–æ—Ä—É–∂–∏–µ":
                total_hands += item.hand_slot
                if item.hand_slot == 2:
                    has_two_handed = True
            elif item.category == "—â–∏—Ç":
                total_hands += 1
                has_shield = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        if new_item.category == "–æ—Ä—É–∂–∏–µ":
            if new_item.hand_slot == 2:
                # –î–≤—É—Ä—É—á–Ω–æ–µ –æ—Ä—É–∂–∏–µ –º–æ–∂–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ø—É—Å—Ç—ã–µ —Ä—É–∫–∏
                return total_hands == 0
            else:
                # –û–¥–Ω–æ—Ä—É—á–Ω–æ–µ –æ—Ä—É–∂–∏–µ: —Ä—É–∫–∏ –Ω–µ –∑–∞–Ω—è—Ç—ã –¥–≤—É—Ä—É—á–Ω—ã–º, –∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
                return not has_two_handed and (total_hands + 1) <= 2

        elif new_item.category == "—â–∏—Ç":
            # –©–∏—Ç –º–æ–∂–Ω–æ —ç–∫–∏–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ—Ä—É—á–Ω—ã–º –æ—Ä—É–∂–∏–µ–º
            return not has_two_handed and (total_hands + 1) <= 2

        else:
            # –ë—Ä–æ–Ω—è –∏ –ø—Ä–æ—á–µ–µ —ç–∫–∏–ø–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            return True
