# ui\trade_menu.py

import discord
from ui.base_menu import BaseMenu, BaseButton
from models.item import Item
from models.inventory import InventoryManager
from models.storage import StorageType
from models.character import Character
from ui.embeds.item_embed import ItemEmbed
from ui.selectors.quantity_selector import ItemQuantitySelect
import logging


class TradeMenu(BaseMenu):
    @classmethod
    async def create(cls, user):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏."""
        instance = cls(user)

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = await Item.get_all_categories()
        if not categories:
            instance.add_item(BaseButton(
                label="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                user=user,
                disabled=True
            ))
            return instance

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in categories:
            instance.add_item(
                BaseButton(
                    label=f"{category['category']} ({category['count']})",
                    user=user,
                    callback=lambda i, cat=category: instance.show_items_in_category(i, cat['category'])
                )
            )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        instance.add_item(BaseButton(
            label="–ù–∞–∑–∞–¥ üîô",
            user=user,
            callback=instance.go_back
        ))

        return instance

    async def show_items_in_category(self, interaction: discord.Interaction, category_name: str):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        items = await Item.get_items_by_category(category_name)
        if not items:
            await interaction.response.send_message(
                f"‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}.",
                ephemeral=True
            )
            return

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
        self.clear_items()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        for item in items:
            self.add_item(
                BaseButton(
                    label=f"{item['name']} üí∞{item['price']}",
                    user=interaction.user,
                    callback=lambda i, it=item: self.buy_item(i, it)
                )
            )

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        self.add_item(BaseButton(
            label="–ù–∞–∑–∞–¥ üîô",
            user=interaction.user,
            callback=self.go_back
        ))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await interaction.response.edit_message(view=self)

    async def buy_item(self, interaction: discord.Interaction, item):
        """–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ
            item_details = await Item.get_item_by_id(item['id'])
            if not item_details:
                await interaction.response.send_message("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral=True)
                return

            # –°–æ–∑–¥–∞–µ–º embed —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞
            embed = ItemEmbed.create(item_details)

            # –°–æ–∑–¥–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            quantity_selector = ItemQuantitySelect(
                user=interaction.user,
                item=item_details,
                show_item_details=lambda i: self.show_items_in_category(i, item_details['category']),
                max_quantity=10
            )

            # –°–æ–∑–¥–∞–µ–º view —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
            view = discord.ui.View()
            view.add_item(quantity_selector)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å embed –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
            await interaction.response.send_message("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ.", ephemeral=True)

    async def go_back(self, interaction: discord.Interaction):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self.clear_items()
        categories = await Item.get_all_categories()

        for category in categories:
            self.add_item(
                BaseButton(
                    label=f"{category['category']} ({category['count']})",
                    user=interaction.user,
                    callback=lambda i, cat=category: self.show_items_in_category(i, cat['category'])
                )
            )

        self.add_item(BaseButton(
            label="–ù–∞–∑–∞–¥ üîô",
            user=interaction.user,
            callback=lambda i: self.go_back_to_camp(i)
        ))

        await interaction.response.edit_message(view=self)

    async def go_back_to_camp(self, interaction: discord.Interaction):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ª–∞–≥–µ—Ä—è"""
        from ui.camp_menu import CampMenu
        camp_menu = await CampMenu.create(interaction.user)
        await interaction.response.edit_message(view=camp_menu)
