# ui\inventory_menu.py
import discord
from ui.base_menu import BaseMenu, BaseButton
from models.item import Item
from models.inventory import InventoryManager
from models.storage import StorageType
from ui.embeds.item_embed import ItemEmbed
from ui.selectors.quantity_selector import ItemQuantitySelect
from ui.base_storage_menu import StorageMenu
import logging

class InventoryMenu(StorageMenu):
    def __init__(self, user):
        super().__init__(user, StorageType.INVENTORY)

    @classmethod
    async def create(cls, user):
        instance = cls(user)
        await instance.load_items()  # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –æ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        await instance.update_view()

        back_button = BaseButton(
            label="–ù–∞–∑–∞–¥ üîô",
            user=user,
            callback=instance.go_back
        )
        instance.add_item(back_button)

        return instance


    @staticmethod
    async def handle_move(self, interaction: discord.Interaction, item):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
        """
        try:
            success = await InventoryManager.move_item(
                user_id=interaction.user.id,
                item_id=item['id'],
                quantity=item['quantity'],
                from_storage=StorageType.INVENTORY,
                to_storage=StorageType.EQUIPMENT
            )

            if success:
                await interaction.response.send_message(
                    f"‚úÖ {item['name']} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∏–∑ üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ üîß —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ üîß —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
                    ephemeral=True
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –∏–∑ üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –≤ üîß —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
                ephemeral=True
            )

    @staticmethod
    async def handle_sell(self, interaction: discord.Interaction, item):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
        """
        try:
            success = await InventoryManager.sell_item(
                user_id=interaction.user.id,
                item_id=item['id'],
                quantity=item['quantity'],
                storage=StorageType.INVENTORY
            )

            if success:
                await interaction.response.send_message(
                    f"‚úÖ {item['name']} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω –∏–∑ üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è",
                    ephemeral=True
                )
            else:
                await interaction.response.send_message(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è",
                    ephemeral=True
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –∏–∑ üéí –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è",
                ephemeral=True
            )

    @staticmethod
    async def go_back(interaction: discord.Interaction):
        from ui.camp_menu import CampMenu  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç
        try:
            camp_menu = await CampMenu.create(interaction.user)
            await interaction.response.edit_message(view=camp_menu)
        except Exception as e:
            logging.error(f"InventoryMenu.go_back: {e}")
            await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", ephemeral=True)
