# ui\selectors\quantity_selector.py
import discord
import logging
from models.item import Item
from models.inventory import InventoryManager
from models.storage import StorageType
from ui.base_menu import BaseMenu, BaseButton


class ItemQuantitySelect(discord.ui.Select):
    def __init__(self, user, item, show_item_details, max_quantity=10):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
        """
        options = [
            discord.SelectOption(
                label=f"{qty} —à—Ç. - {item['price'] * qty} üí∞",
                value=str(qty)
            ) for qty in range(1, max_quantity + 1)
        ]

        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ",
            min_values=1,
            max_values=1,
            options=options
        )
        self.user = user
        self.item = item
        self.show_item_details = show_item_details  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω —è–≤–Ω–æ

    async def callback(self, interaction: discord.Interaction):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.
        """
        quantity = int(self.values[0])

        destination_view = discord.ui.View()
        destination_view.add_item(
            DestinationButton(
                self.user,
                self.item,
                quantity,
                destination="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
            )
        )
        destination_view.add_item(
            DestinationButton(
                self.user,
                self.item,
                quantity,
                destination="üîß –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
            )
        )

        back_button = BaseButton(
            "–ù–∞–∑–∞–¥ üîô",
            self.user,
            callback=self.show_item_details
        )
        destination_view.add_item(back_button)

        await interaction.response.edit_message(
            content=f"–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è {quantity} √ó {self.item['name']}",
            view=destination_view
        )

class DestinationButton(discord.ui.Button):
    def __init__(self, user, item, quantity, destination):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞.
        """
        super().__init__(label=f"–î–æ–±–∞–≤–∏—Ç—å –≤ {destination}", style=discord.ButtonStyle.primary)
        self.user = user
        self.item = item
        self.quantity = quantity
        self.destination = destination

    async def callback(self, interaction: discord.Interaction):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞.
        """
        try:
            result = await InventoryManager.move_item(
                user_id=self.user.id,
                item_id=self.item['id'],
                quantity=self.quantity,
                from_storage=StorageType.EQUIPMENT if self.destination == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å" else StorageType.INVENTORY,
                to_storage=StorageType.INVENTORY if self.destination == "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å" else StorageType.EQUIPMENT
            )
            await interaction.response.send_message(
                f"‚úÖ {self.quantity} √ó {self.item['name']} –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ {self.destination}",
                ephemeral=True
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {str(e)}")
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", ephemeral=True)
