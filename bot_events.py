# bot_events.py
import os
import logging
import asyncio
import traceback
import discord
from config.session_manager import SessionManager
from config.logger import safe_execute
from config.database import execute_query, fetch_query, close_db

class BotEvents:
    @staticmethod
    async def on_ready(bot):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
        logging.info("üöÄ –ù–∞—á–∞–ª–æ —Å–æ–±—ã—Ç–∏—è on_ready")
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ .env
        CAMP_CHANNEL_ID = int(os.getenv('camp_channel_ID'))
        RAID_CHANNEL_ID = int(os.getenv('raid_channel_ID'))
        main_channel_ids = [CAMP_CHANNEL_ID, RAID_CHANNEL_ID]

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ SessionManager
            session = await SessionManager().get_session()
            if session:
                logging.info("‚úÖ aiohttp-—Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            else:
                logging.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å aiohttp-—Å–µ—Å—Å–∏—é")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
            guild = discord.utils.get(bot.guilds, name="–ë–æ—Ç–æ—Ç–µ—Å—Ç–µ—Ä")
            if guild:
                bot_member = guild.get_member(bot.user.id)
                logging.info("üîë –†–æ–ª–∏ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:")
                for role in bot_member.roles:
                    logging.info(f"- {role.name} (ID: {role.id})")
            else:
                logging.warning("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
            try:
                threads = await fetch_query("SELECT threads_id, user_id, thread_type FROM threads")

            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤: {e}")
                threads = []

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
            total_threads = len(threads)
            invalid_threads = 0
            invalid_main_threads = 0
            thread_types = {'camp': 0, 'raid': 0}

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–æ–≤
            for row in threads:
                thread_id, user_id, thread_type = row[0], row[1], row[2]
                thread = bot.get_channel(thread_id)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞
                if thread is None:
                    invalid_threads += 1
                    logging.warning(f"‚ùå –ü–æ—Ç–æ–∫ —Å ID {thread_id} —Ç–∏–ø–∞ {thread_type} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

                    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    await safe_execute(
                        execute_query,
                        "DELETE FROM threads WHERE threads_id = ?",
                        (thread_id,)
                    )
                else:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
                    parent_channel_id = thread.parent_id if isinstance(thread, discord.Thread) else thread.id

                    if parent_channel_id not in main_channel_ids:
                        invalid_main_threads += 1
                        logging.warning(
                            f"‚ö†Ô∏è –ü–æ—Ç–æ–∫ {thread_id} —Ç–∏–ø–∞ {thread_type} "
                            f"–Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º. "
                            f"–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞–Ω–∞–ª: {parent_channel_id}"
                        )

                        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
                        await safe_execute(
                            execute_query,
                            "DELETE FROM threads WHERE threads_id = ?",
                            (thread_id,)
                        )
                    else:
                        # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ –ø–æ—Ç–æ–∫–æ–≤
                        thread_types[thread_type] += 1

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ç–æ–∫–æ–≤
            logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤:")
            logging.info(f"- –í—Å–µ–≥–æ –ø–æ—Ç–æ–∫–æ–≤: {total_threads}")
            logging.info(f"- –õ–∞–≥–µ—Ä–µ–π: {thread_types['camp']}")
            logging.info(f"- –†–µ–π–¥–æ–≤: {thread_types['raid']}")
            logging.info(f"- –ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {invalid_threads}")
            logging.info(f"- –ü–æ—Ç–æ–∫–æ–≤ –≤–Ω–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {invalid_main_threads}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
            if invalid_threads > 0 or invalid_main_threads > 0:
                logging.warning(
                    f"üßπ –£–¥–∞–ª–µ–Ω–æ {invalid_threads} –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤ "
                    f"–∏ {invalid_main_threads} –ø–æ—Ç–æ–∫–æ–≤ –≤–Ω–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
                )
            print(f"ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤. –í–æ—à–ª–∏ –∫–∞–∫ {bot.user}")
            logging.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {bot.user}")

        except Exception as e:
            logging.critical(
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}\n"
                f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}"
            )
            print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

        # –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫ finally (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        finally:
            logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")

    @staticmethod
    async def close_bot_gracefully(bot):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logging.info("üîÑ –ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")

        try:
            # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç Discord
            if not bot.is_closed():
                logging.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Discord...")
                await bot.close()

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
            pending_tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
            if pending_tasks:
                logging.info(f"üìã –ó–∞–≤–µ—Ä—à–∞–µ–º {len(pending_tasks)} –∑–∞–¥–∞—á...")
                for task in pending_tasks:
                    task.cancel()
                await asyncio.gather(*pending_tasks, return_exceptions=True)
                logging.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            await SessionManager().close_session()
            await close_db()

            logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
            logging.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
