# utils\signal_handler
import asyncio
import signal
import logging
import sys
import traceback

class GracefulExit:
    def __init__(self, bot):
        self.bot = bot
        self.is_shutting_down = False
        self.shutdown_timeout = 10  # –¢–∞–π–º–∞—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    async def handle_signals(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        try:
            loop = asyncio.get_running_loop()

            if sys.platform == "win32":
                def windows_signal_handler():
                    asyncio.create_task(self.shutdown())

                import win32api
                win32api.SetConsoleCtrlHandler(windows_signal_handler, True)
                logging.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Windows")
            else:
                for sig in (signal.SIGINT, signal.SIGTERM):
                    loop.add_signal_handler(
                        sig,
                        lambda s=sig: asyncio.create_task(self.shutdown(s))
                    )
                logging.info("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è Unix")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    async def shutdown(self, signal=None):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º"""
        if self.is_shutting_down:
            return

        self.is_shutting_down = True
        signal_name = signal.name if signal else "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"
        logging.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}. –ù–∞—á–∞–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")

        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
            pending_tasks = [
                task for task in asyncio.all_tasks()
                if task is not asyncio.current_task()
            ]

            if pending_tasks:
                logging.info(f"üìã –ó–∞–≤–µ—Ä—à–∞–µ–º {len(pending_tasks)} –∑–∞–¥–∞—á...")

                # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
                for task in pending_tasks:
                    task.cancel()

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                try:
                    await asyncio.wait_for(
                        asyncio.gather(*pending_tasks, return_exceptions=True),
                        timeout=self.shutdown_timeout
                    )
                except asyncio.TimeoutError:
                    logging.warning("‚è∞ –ù–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞")

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ—Ç–∞ –∏ —Å–µ—Å—Å–∏–π
            if hasattr(self.bot, 'close'):
                await self.bot.close()

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
            from config.database import close_db
            from config.session_manager import SessionManager

            await close_db()
            await SessionManager.close_session()

            logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: {e}")
            logging.error(traceback.format_exc())

        finally:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
            loop = asyncio.get_event_loop()
            loop.stop()
            sys.exit(0)
