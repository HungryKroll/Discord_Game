# models\storage.py
from enum import Enum


class StorageType(Enum):
    """
    –¢–∏–ø—ã —Ö—Ä–∞–Ω–∏–ª–∏—â —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º Enum –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ –∏ —É–¥–æ–±—Å—Ç–≤–∞.
    """

    INVENTORY = {
        "display": "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
        "storage": "inventory",
        "allowed_categories": None  # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    }

    EQUIPMENT = {
        "display": "üîß –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
        "storage": "equipment",
        "allowed_categories": None  # –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
    }

    @classmethod
    def get_by_name(cls, name: str):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ –∏–º–µ–Ω–∏"""
        try:
            return cls[name.upper()]
        except KeyError:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {name}")
            return None

    @classmethod
    def check_category(cls, storage_type, category: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        if storage_type not in cls:
            return False

        # –î–ª—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if storage_type.value["allowed_categories"] is None:
            return True

        return category in storage_type.value["allowed_categories"]

    def get_storage_name(self):
        return self.value["storage"]
