# main.py
import os
import sys
import asyncio
import logging
import discord
from dotenv import load_dotenv
from discord.ext import commands

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from config.bot_config import BotConfig
from config.logger import setup_logger, safe_execute
from config.session_manager import SessionManager
from config.database import init_database, close_db
from bot_events import BotEvents
from utils.signal_handler import GracefulExit
from game_commands import setup as setup_game_commands

from ui.camp_menu import CampMenu

async def create_aiohttp_session():
    """–°–æ–∑–¥–∞–Ω–∏–µ aiohttp —Å–µ—Å—Å–∏–∏"""
    session = await SessionManager().get_session()
    if session:
        logging.info("aiohttp —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è aiohttp —Å–µ—Å—Å–∏–∏")

async def main():
    bot = None
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        setup_logger()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Windows event loop policy
        if sys.platform == "win32":
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await init_database()

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Ç–æ–≤
        intents = discord.Intents.default()
        for intent, value in BotConfig.INTENTS_CONFIG.items():
            setattr(intents, intent, value)

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = commands.Bot(command_prefix='!', intents=intents)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
        await setup_game_commands(bot)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        graceful_exit = GracefulExit(bot)
        await graceful_exit.handle_signals()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è on_ready
        @bot.event
        async def on_ready():
            await BotEvents.on_ready(bot)

        # –ö–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
        @bot.command(name='—Å—Ç–æ–ø')
        async def stop_bot(ctx):
            if ctx.author.id == BotConfig.OWNER_ID:
                await ctx.send("–ò–Ω–∏—Ü–∏–∏—Ä—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
                logging.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞.")
                await BotEvents.close_bot_gracefully(bot)
            else:
                await ctx.send("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞.")
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º: {ctx.author.id}")

        # –°–æ–∑–¥–∞–Ω–∏–µ aiohttp —Å–µ—Å—Å–∏–∏
        safe_execute(create_aiohttp_session)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.start(BotConfig.TOKEN)

    except Exception as e:
        logging.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        if bot is not None:
            await BotEvents.close_bot_gracefully(bot)

        await SessionManager().close_session()
        await close_db()
        logging.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

def shutdown_handler():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á"""
    try:
        logging.info("üîÑ –ù–∞—á–∞–ª–æ shutdown_handler")
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        all_tasks = asyncio.all_tasks(loop)
        pending_tasks = [t for t in all_tasks if not t.done()]

        logging.info(f"üî¢ –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(all_tasks)}")
        logging.info(f"üöß –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(pending_tasks)}")

        if pending_tasks:
            logging.info(f"–û—Å—Ç–∞–ª–æ—Å—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {len(pending_tasks)}")
            for task in pending_tasks:
                task.cancel()

            try:
                loop.run_until_complete(asyncio.gather(*pending_tasks, return_exceptions=True))
            except asyncio.CancelledError:
                logging.info("–í—Å–µ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á: {e}")

        loop.close()
        logging.info("–°–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª –∑–∞–∫—Ä—ã—Ç")

    except Exception as e:
        logging.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ shutdown_handler: {e}", exc_info=True)
    finally:
        logging.info("üèÅ –§–∏–Ω–∞–ª—å–Ω—ã–π —ç—Ç–∞–ø shutdown_handler")
        os._exit(0)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    except Exception as e:
        logging.critical(f"‚ùå –ù–µ—É—Å—Ç—Ä–∞–Ω–∏–º–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        logging.info("üîç –í—Ö–æ–¥ –≤ shutdown_handler")
        shutdown_handler()
